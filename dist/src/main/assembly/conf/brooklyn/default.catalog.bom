# Copyright 2014-2015 by Cloudsoft Corporation Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

brooklyn.catalog:
  version: "1.3.0-REAPPT-1.4.4-SNAPSHOT" # CLOCKER_VERSION

  brooklyn.libraries:
    - "https://oss.sonatype.org/content/repositories/releases/io/brooklyn/etcd/brooklyn-etcd/2.2.0/brooklyn-etcd-2.2.0.jar"

  include: https://raw.githubusercontent.com/brooklyncentral/brooklyn-etcd/v2.2.0/catalog.bom

  items:
  - id: docker-infrastructure
    name: "Docker Infrastructure"
    item:
      type: clocker.docker.entity.DockerInfrastructure
      brooklyn.config:
        docker.version: 1.10.3 # DOCKER_VERSION
        entity.dynamicLocation.name: "my-docker-cloud"
        docker.container.cluster.headroom.count: 4
        docker.policy.ha.enable: false
        docker.container.strategies:
        - $brooklyn:object:
            type: clocker.docker.location.strategy.basic.MaxContainersPlacementStrategy
            brooklyn.config:
              maxContainers: 16
        - $brooklyn:object:
            type: clocker.docker.location.strategy.basic.BreadthFirstPlacementStrategy
        docker.host.spec:
          $brooklyn:entitySpec:
            type: docker-host

  - id: docker-host
    name: "Docker Host"
    item:
      type: clocker.docker.entity.DockerHost
      brooklyn.config:
        docker.host.driver.storage: overlay
        docker.container.spec:
          $brooklyn:entitySpec:
            type: docker-container
        docker.host.flags:
          minRam: 7g
          minCores: 2
          stopIptables: true
        start.timeout: 5m

  - id: docker-container
    name: "Docker Container"
    item:
      type: clocker.docker.entity.container.DockerContainer

  - id: calico-network
    name: "Calico Network"
    item:
      type: clocker.docker.networking.entity.sdn.calico.CalicoNetwork
      brooklyn.config:
        calico.version: 0.19.0
        sdn.agent.spec:
          $brooklyn:entitySpec:
            type: calico-node

  - id: calico-node
    name: "Calico Node"
    item:
      type: clocker.docker.networking.entity.sdn.calico.CalicoNode

  - id: calico-module
    name: "Calico Network Module"
    item:
      type: clocker.mesos.networking.entity.sdn.calico.CalicoModule
      brooklyn.config:
        calico.version: 0.8.0

  - id: weave-network
    name: "Weave Network"
    item:
      type: clocker.docker.networking.entity.sdn.weave.WeaveNetwork
      brooklyn.config:
        weave.version: 1.5.0
        sdn.agent.spec:
          $brooklyn:entitySpec:
            type: weave-router

  - id: weave-router
    name: "Weave Router"
    item:
      type: clocker.docker.networking.entity.sdn.weave.WeaveRouter

  - id: overlay-network
    name: "Docker Overlay Network"
    item:
      type: clocker.docker.networking.entity.sdn.overlay.OverlayNetwork
      brooklyn.config:
        sdn.agent.spec:
          $brooklyn:entitySpec:
            type: overlay-plugin

  - id: overlay-plugin
    name: "Docker Overlay Plugin"
    item:
      type: clocker.docker.networking.entity.sdn.overlay.OverlayPlugin

  - id: docker-registry
    name: "Docker Registry"
    services:
    - type: clocker.docker.entity.container.registry.DockerRegistry
      brooklyn.config:
        docker.registry.port: 5000

  - id: mesos-cluster
    name: Mesos Cluster
    item:
      type: clocker.mesos.entity.MesosCluster
      brooklyn.config:
        entity.dynamicLocation.name: "my-mesos-cluster"

  - id: marathon-framework
    name: Marathon Framework
    item:
      type: clocker.mesos.entity.framework.marathon.MarathonFramework

  - id: docker-cloud-single
    name: "Clocker"
    description: |
      Single Docker host without networking
    iconUrl: classpath://docker-logo.png
    itemType: template
    item:
      services:
      - type: docker-infrastructure
        brooklyn.config:
          docker.host.cluster.initial.size: 1
          docker.container.cluster.headroom.count: 0
          docker.container.strategies:
          - $brooklyn:object:
              type: clocker.docker.location.strategy.basic.MaxContainersPlacementStrategy
              brooklyn.config:
                maxContainers: 32
          - $brooklyn:object:
              type: clocker.docker.location.strategy.basic.DepthFirstPlacementStrategy
          sdn.enable: false

  - id: docker-cloud-calico
    name: "Clocker with Calico"
    description: |
      Docker Cloud infrastructure with Calico networking
    iconUrl: classpath://calico-logo.png
    itemType: template
    item:
      services:
      - type: docker-infrastructure
        brooklyn.config:
          sdn.enable: true
          sdn.provider.spec:
            $brooklyn:entitySpec:
              type: calico-network
              brooklyn.config:
                sdn.network.cidr: 50.0.0.0/16
                sdn.network.size: 24

  - id: docker-cloud-weave
    name: "Clocker with Weave"
    description: |
      Docker Cloud infrastructure with Weave networking
    iconUrl: classpath://weaveworks-logo.png
    itemType: template
    item:
      services:
      - type: docker-infrastructure
        brooklyn.config:
          sdn.enable: true
          sdn.provider.spec:
            $brooklyn:entitySpec:
              type: weave-network

  - id: docker-cloud-overlay
    name: "Clocker with Docker Overlay"
    description: |
      Docker Cloud infrastructure with Docker overlay networking
    iconUrl: classpath://docker-logo.png
    itemType: template
    item:
      services:
      - type: docker-infrastructure
        brooklyn.config:
          sdn.enable: true
          sdn.provider.spec:
            $brooklyn:entitySpec:
              type: overlay-network

  - id: external-mesos-cluster
    name: "External Mesos Cluster"
    description: |
      Access a running Mesos cluster
    iconUrl: classpath://mesos-logo.png
    itemType: template
    item:
      services:
      - type: mesos-cluster
        brooklyn.config:
          mesos.url: "http://localhost:5050/"

  - id: haproxy-controller
    name: "HAProxy"
    description: |
      HAProxy load balancer entity.
    item:
      type: org.apache.brooklyn.entity.proxy.haproxy.HAProxyController
      brooklyn.config:
        docker.image.name: haproxy
        docker.useSsh: false
        docker.image.commands:
        - "/bin/bash"
        docker.container.interactive: true
        docker.container.openPorts.configKeys:
        - $brooklyn:sensor("org.apache.brooklyn.entity.proxy.AbstractController", "proxy.http.port")
        - $brooklyn:sensor("org.apache.brooklyn.entity.proxy.AbstractController", "proxy.https.port")
        install.dir: /usr/local/sbin/
        run.dir: /usr/local/etc/haproxy/
        member.sensor.hostname: "host.subnet.hostname"
        provisioning.properties:
          entity.dynamicLocation.flags:
            user: root

  - id: riak-cluster-demo-application
    name: "Riak Cluster Demo Application"
    description: |
      Riak cluster with load-balanced chatroom webapp
    iconUrl: classpath://riak-icon.png
    itemType: template
    item:
      services:
      - type: org.apache.brooklyn.entity.stock.BasicApplication
        id: riak-demo
        name: "Riak Demo"
        brooklyn.children:
        - type: clocker.docker.networking.entity.VirtualNetwork
          networkId: webapp
        - type: clocker.docker.networking.entity.VirtualNetwork
          networkId: riak
        - type: org.apache.brooklyn.entity.nosql.riak.RiakCluster
          initialSize: 3
          id: riak-cluster
          name: "Riak Cluster"
          brooklyn.config:
            install.version: 2.1.4
            riak.networking.optimize: false
            network.list:
            - riak
        - type: org.apache.brooklyn.entity.webapp.ControlledDynamicWebAppCluster
          name: "Web Cluster"
          id: web-cluster
          brooklyn.config:
            initialSize: 2
            dynamiccluster.memberspec:
              $brooklyn:entitySpec:
                type: org.apache.brooklyn.entity.webapp.tomcat.Tomcat8Server
                brooklyn.config:
                  network.list:
                  - webapp
                  - riak
                  wars.root:
                    "https://s3-eu-west-1.amazonaws.com/brooklyn-clocker/brooklyn-example-hello-world-sql-webapp.war"
                  java.sysprops:
                    brooklyn.example.riak.nodes:
                      $brooklyn:component("riak-cluster").attributeWhenReady("riak.cluster.nodeList")
            controlleddynamicwebappcluster.controllerSpec:
              $brooklyn:entitySpec:
                type: haproxy-controller
                id: load-balancer
                brooklyn.config:
                  docker.image.tag: 1.6.4
                  network.list:
                  - webapp
          brooklyn.enrichers:
          # publish the mapped URL at the cluster
          - type: org.apache.brooklyn.enricher.stock.Propagator
            brooklyn.config:
              uniqueTag: url-propagator
              enricher.producer: $brooklyn:component("load-balancer")
              enricher.propagating.inclusions:
              - mapped.main.uri
        brooklyn.enrichers:
        # publish the URL (both mapped and unmapped) at the top-level app
        - type: org.apache.brooklyn.enricher.stock.Propagator
          brooklyn.config:
            uniqueTag: url-propagator
            enricher.producer: $brooklyn:component("web-cluster")
            enricher.propagating.inclusions:
            - main.uri
            - mapped.main.uri

  - id: nodejs-demo-application
    name: "Node.js Demo Application"
    description: |
      Node.js todo list application with redis database
    iconUrl: classpath://node-js-icon.png
    itemType: template
    item:
      services:
      - type: org.apache.brooklyn.entity.stock.BasicApplication
        id: nodejs-demo
        name: "Node.js Demo"
        brooklyn.children:
        - type: org.apache.brooklyn.entity.nosql.redis.RedisStore
          id: redis
          name: "Redis"
          brooklyn.config:
            install.version: 3.0.3
        - type: org.apache.brooklyn.entity.webapp.nodejs.NodeJsWebAppService
          id: nodejs
          name: "Node.js"
          brooklyn.config:
            docker.container.openPorts.configKeys:
            - $brooklyn:sensor("http.port")
            gitRepoUrl:
              "https://github.com/grkvlt/nodejs-todo/"
            appFileName: server.js
            appName: nodejs-todo
            nodePackages:
            - express
            - ejs
            - jasmine-node
            - underscore
            - method-override
            - cookie-parser
            - express-session
            - body-parser
            - cookie-session
            - redis
            - redis-url
            - connect
            env:
              REDISTOGO_URL: >
                $brooklyn:formatString("redis://%s:%d/",
                component("redis").attributeWhenReady("host.subnet.hostname"),
                component("redis").attributeWhenReady("redis.port"))
            launch.latch: $brooklyn:component("redis").attributeWhenReady("service.isUp")
            provisioning.properties:
              installDevUrandom: true
        brooklyn.enrichers:
        - type: org.apache.brooklyn.enricher.stock.Propagator
          brooklyn.config:
            uniqueTag: url-propagator
            enricher.producer: $brooklyn:component("nodejs")
            enricher.propagating.inclusions:
            - webapp.url
            - mapped.webapp.url

  - id: identicon-demo-application
    name: "Identicon Demo Application"
    description: |
      Identicon application using Redis backing store and Node.js front end.
    iconUrl: http://identicon.net/img/identicon.png
    itemType: template
    item:
      services:
      - type: org.apache.brooklyn.entity.stock.BasicApplication
        id: identicon-demo
        name: "Identicon Demo"
        brooklyn.children:
        - type: docker:redis:3
          id: redis
          openPorts:
          - 6379
        - type: docker:clockercentral/dnmonster:1.0
          id: dnmonster
          openPorts:
          - 8080
        - type: docker:clockercentral/identidock:1.9
          id: identidock
          openPorts:
          - 9090
          - 9091
          links:
            redis: $brooklyn:component("redis")
            dnmonster: $brooklyn:component("dnmonster")
          brooklyn.enrichers:
          - type: org.apache.brooklyn.enricher.stock.Transformer
            brooklyn.config:
              uniqueTag: external-url-generator
              enricher.sourceSensor: mapped.docker.port.9090
              enricher.targetSensor: main.uri
              enricher.targetValue:
                $brooklyn:formatString:
                - "http://%s/"
                - $brooklyn:attributeWhenReady("mapped.docker.port.9090")
        brooklyn.enrichers:
        - type: org.apache.brooklyn.enricher.stock.Propagator
          brooklyn.config:
            uniqueTag: url-propagator
            enricher.producer: $brooklyn:component("identidock")
            enricher.propagating.inclusions:
            - main.uri
